2338. Count the Number of Ideal Arrays


You are given two integers n and maxValue, which are used to describe an ideal array.

A 0-indexed integer array arr of length n is considered ideal if the following conditions hold:

Every arr[i] is a value from 1 to maxValue, for 0 <= i < n.
Every arr[i] is divisible by arr[i - 1], for 0 < i < n.
Return the number of distinct ideal arrays of length n. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 2, maxValue = 5
Output: 10
Explanation: The following are the possible ideal arrays:
- Arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5]
- Arrays starting with the value 2 (2 arrays): [2,2], [2,4]
- Arrays starting with the value 3 (1 array): [3,3]
- Arrays starting with the value 4 (1 array): [4,4]
- Arrays starting with the value 5 (1 array): [5,5]
There are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays.
Example 2:

Input: n = 5, maxValue = 3
Output: 11
Explanation: The following are the possible ideal arrays:
- Arrays starting with the value 1 (9 arrays): 
   - With no other distinct values (1 array): [1,1,1,1,1] 
   - With 2nd distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]
   - With 2nd distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]
- Arrays starting with the value 2 (1 array): [2,2,2,2,2]
- Arrays starting with the value 3 (1 array): [3,3,3,3,3]
There are a total of 9 + 1 + 1 = 11 distinct ideal arrays.
 

Constraints:

2 <= n <= 104
1 <= maxValue <= 104

SOLUTION OF THE ABOVE PROBLEM:

#JAVA CODE:


 class Solution {
    static final int MOD = 1_000_000_007;
    static final int MAX_N = 10000;
    static final int MAX_E = 14; // max number of exponents for any number <= 10000
    static int[][] comb = new int[MAX_N + MAX_E + 1][MAX_E + 1]; // enough to avoid out-of-bound

    public int idealArrays(int n, int maxValue) {
        precomputeCombinations(n);

        int result = 0;
        for (int i = 1; i <= maxValue; i++) {
            List<Integer> exponents = getExponents(i);

            long ways = 1;
            for (int e : exponents) {
                // Apply Stars and Bars: (n - 1 + e) choose e
                ways = (ways * comb[n - 1 + e][e]) % MOD;
            }

            result = (int)((result + ways) % MOD);
        }

        return result;
    }

    private void precomputeCombinations(int n) {
        for (int i = 0; i < comb.length; i++) {
            comb[i][0] = 1;
            for (int j = 1; j <= MAX_E && j <= i; j++) {
                comb[i][j] = (comb[i - 1][j] + comb[i - 1][j - 1]) % MOD;
            }
        }
    }

    private List<Integer> getExponents(int num) {
        List<Integer> exponents = new ArrayList<>();
        for (int i = 2; i * i <= num; i++) {
            int count = 0;
            while (num % i == 0) {
                num /= i;
                count++;
            }
            if (count > 0) {
                exponents.add(count);
            }
        }
        if (num > 1) {
            exponents.add(1); // num is a prime itself
        }
        return exponents;
    }
}
