1353. Maximum Number of Events That Can Be Attended

You are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.

You can attend an event i at any day d where startDayi <= d <= endDayi. You can only attend one event at any time d.

Return the maximum number of events you can attend.

 

Example 1:


Input: events = [[1,2],[2,3],[3,4]]
Output: 3
Explanation: You can attend all the three events.
One way to attend them all is as shown.
Attend the first event on day 1.
Attend the second event on day 2.
Attend the third event on day 3.
Example 2:

Input: events= [[1,2],[2,3],[3,4],[1,2]]
Output: 4

SOLUTION OF THE ABOVE PROBLEM:


 #JAVA CODE:



class Solution {
    public int maxEvents(int[][] events) {
        Arrays.sort(events, (a, b) -> a[0] - b[0]); // Sort by start day
        
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(); // Min-heap of end days
        
        int day = 1, i = 0, n = events.length;
        int count = 0;
        
        // Find the last day among all events
        int maxDay = 0;
        for (int[] event : events) {
            maxDay = Math.max(maxDay, event[1]);
        }
        
        for (day = 1; day <= maxDay; day++) {
            // Add all events that start today
            while (i < n && events[i][0] == day) {
                minHeap.offer(events[i][1]);
                i++;
            }
            
            // Remove events that have already ended
            while (!minHeap.isEmpty() && minHeap.peek() < day) {
                minHeap.poll();
            }
            
            // Attend the event with earliest end day
            if (!minHeap.isEmpty()) {
                minHeap.poll();
                count++;
            }
        }
        
        return count;

    }
}
