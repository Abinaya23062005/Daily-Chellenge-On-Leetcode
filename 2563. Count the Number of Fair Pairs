2563. Count the Number of Fair Pairs

Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.

A pair (i, j) is fair if:

0 <= i < j < n, and
lower <= nums[i] + nums[j] <= upper
 

Example 1:

Input: nums = [0,1,7,4,4,5], lower = 3, upper = 6
Output: 6
Explanation: There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).
Example 2:

Input: nums = [1,7,9,2,5], lower = 11, upper = 11
Output: 1
Explanation: There is a single fair pair: (2,3).

#JAVA CODE:

SOLUTION OF THE ABOVE PROBLEM:

class Solution {
    public long countFairPairs(int[] nums, int lower, int upper) {
        Arrays.sort(nums); // Step 1: Sort the array
        long count = 0;
        int n = nums.length;

        for (int i = 0; i < n - 1; i++) {
            int minVal = lower - nums[i];
            int maxVal = upper - nums[i];

            int left = lowerBound(nums, i + 1, n - 1, minVal);  // First index â‰¥ minVal
            int right = upperBound(nums, i + 1, n - 1, maxVal); // Last index â‰¤ maxVal

            // Check if left <= right (valid range)
            if (left <= right) {
                count += (right - left + 1);
            }
        }

        return count;
    }

    // Lower bound: First index where nums[j] >= target
    private int lowerBound(int[] nums, int start, int end, int target) {
        int low = start, high = end, ans = end + 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] >= target) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    // Upper bound: Last index where nums[j] <= target
    private int upperBound(int[] nums, int start, int end, int target) {
        int low = start, high = end, ans = start - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] <= target) {
                ans = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return ans;
    }
}
